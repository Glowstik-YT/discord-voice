{"meta":{"generator":"0.10.0","format":20,"date":1628356716758},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# This is work in progress!","path":"docs/general/welcome.md"}}},"examples":{"name":"Examples","files":{"simple":{"name":"Simple","type":"md","content":"# This is work in progress!","path":"docs/examples/simple.md"},"sharding":{"name":"Sharding","type":"md","content":"# This is work in progress!","path":"docs/examples/sharding.md"},"mongoose":{"name":"Mongoose","type":"md","content":"# This is work in progress!","path":"docs/examples/mongoose.md"}}}},"classes":[{"name":"VoiceManager","description":"Voice Manager","construct":{"name":"VoiceManager","params":[{"name":"client","description":"The Discord Client","type":[[["DiscordClient"]]]},{"name":"options","description":"The manager options","type":[[["VoiceManagerOptions"]]]}]},"props":[{"name":"client","description":"The Discord Client","type":[[["DiscordClient"]]],"meta":{"line":47,"file":"Manager.js","path":"src"}},{"name":"ready","description":"Whether the manager is ready","type":[[["Boolean"]]],"meta":{"line":52,"file":"Manager.js","path":"src"}},{"name":"users","description":"The users managed by this manager","type":[[["Array","<"],["User",">"]]],"meta":{"line":57,"file":"Manager.js","path":"src"}},{"name":"configs","description":"The configs managed by this manager","type":[[["Array","<"],["Config",">"]]],"meta":{"line":62,"file":"Manager.js","path":"src"}},{"name":"options","description":"The manager options","type":[[["VoiceManagerOptions"]]],"meta":{"line":67,"file":"Manager.js","path":"src"}}],"methods":[{"name":"createUser","description":"Creates a new user","examples":["manager.createUser(message.author.id, message.guild.id, {\n     levelingData: {\n     xp: 0,\n     level: 0,\n     },\n     // The user will have 0 xp and 0 level.\n});"],"params":[{"name":"userID","description":"The id of the user","type":[[["DiscordSnowflake"]]]},{"name":"guildID","description":"The guild id of the user","type":[[["DiscordSnowflake"]]]},{"name":"options","description":"The options for the user data","type":[[["defaultUserData"]]]}],"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":88,"file":"Manager.js","path":"src"}},{"name":"createConfig","description":"Creates a new config","examples":["manager.createConfig(message.author.id, message.guild.id, {\n     trackBots: false, // If the user is a bot it will not be tracked.\n     trackAllChannels: true, // All of the channels in the guild will be tracked.\n     exemptChannels: () => false, // The user will not be tracked in these channels. (This is a function).\n     channelIDs: [], // The channel ids to track. (If trackAllChannels is true, this is ignored)\n     exemptPermissions: [], // The user permissions to not track.\n     exemptMembers: () => false, // The user will not be tracked. (This is a function).\n     trackMute: true, // It will track users if they are muted aswell.\n     trackDeaf: true, // It will track users if they are deafen aswell.\n     minUserCountToParticipate: 0, // The min amount of users to be in a channel to be tracked.\n     maxUserCountToParticipate: 0, // The max amount of users to be in a channel to be tracked.\n     minXPToParticipate: 0, // The min amount of xp needed to be tracked.\n     minLevelToParticipate: 0, // The min level needed to be tracked.\n     maxXPToParticipate: 0, // The max amount of xp needed to be tracked.\n     maxLevelToParticipate: 0, // The max level needed to be tracked.\n     xpAmountToAdd: () => Math.floor(Math.random() * 10) + 1, // The amount of xp to add to the user (This is a function).\n     voiceTimeToAdd: () => 1000, // The amount of time in ms to add to the user (This is a function).\n     voiceTimeTrackingEnabled: true, // Whether the voiceTimeTracking module is enabled.\n     levelingTrackingEnabled: true, // Whether the levelingTracking module is enabled.\n});"],"params":[{"name":"guildID","description":"The guild id of the user","type":[[["DiscordSnowflake"]]]},{"name":"options","description":"The options for the user data","type":[[["defaultConfigData"]]]}],"returns":[[["Promise","<"],["Config",">"]]],"meta":{"line":143,"file":"Manager.js","path":"src"}}],"meta":{"line":35,"file":"Manager.js","path":"src"}}],"interfaces":[],"typedefs":[],"externals":[]}