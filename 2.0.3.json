{"meta":{"generator":"0.10.0","format":20,"date":1629475031449},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# <p align=\"center\"><a href=\"https://discord-voice.js.org\"><img src=\"https://discord-voice.js.org/icon-resized.png\"></a></p><p align=\"center\">Discord Voice</p>\n\n# <p align=\"center\"><a href=\"https://discord.gg/pndumb6J3t\" target=\"_blank\"> <img alt=\"Discord\" src=\"https://img.shields.io/badge/Chat-Click%20here-7289d9?style=for-the-badge&logo=discord\"> </a> <img src=\"https://img.shields.io/npm/dt/discord-voice?style=for-the-badge\"> <img src=\"https://img.shields.io/npm/v/discord-voice?style=for-the-badge\"> <a href=\"https://discord-voice.js.org\"><img src=\"https://img.shields.io/badge/Documentation-Click%20here-blue?style=for-the-badge\" alt=\"Documentation - https://discord-voice.js.org\"/></a></p>\n\n# What is Discord Voice?\n\n> Discord Voice is a powerful [Node.js](https://nodejs.org/) module that allows you to easily track the user's voice time and levels!\n\n# Features\n\n-   **‚ú® Easy to use!**\n-   **üìÅ Support for all databases! (default is json)**\n-   **‚öôÔ∏è Very customizable! (ignored channels, ignored members, ignored permissions, xp amount to add, voice time to add etc...)**\n-   **üöÄ Super powerful: createUser, createConfig, removeUser, removeConfig, updateUser and updateConfig!**\n-   **üï∏Ô∏è Support for shards!**\n-   **and much more!**\n\n# Installation\n\n```bash\nnpm install --save discord-voice\n```\n\n# Examples\n\nYou can use this example bot on GitHub: [VoiceTimeTrackerBot](https://github.com/Lebyy/VoiceTimeTrackerBot)\n\n# Usage of the modudle\n\n```js\nconst { Client, Intents } = require(\"discord.js\"),\n    client = new Client({\n        intents: [Intents.FLAGS.GUILD_VOICE_STATES, Intents.FLAGS.GUILDS, Intents.FLAGS.GUILD_MESSAGES] // The GUILD_VOICE_STATES and GUILDS intents are required for discord-voice to function.\n    }),\n    settings = {\n        prefix: \"v!\",\n        token: \"Your Discord Bot Token\"\n    };\n\n// Requires Manager from discord-voice\nconst { VoiceManager } = require(\"discord-voice\");\n// Create a new instance of the manager class\nconst manager = new VoiceManager(client, {\n    userStorage: \"./users.json\",\n    configStorage: \"./configs.json\",\n    checkMembersEvery: 5000,\n    default: {\n        trackBots: false,\n        trackAllChannels: true\n    }\n});\n// We now have a voiceManager property to access the manager everywhere!\nclient.voiceManager = manager;\n```\n\nAfter that, user's who are in the voice channel's that the bot has cached will be checked. You can pass an options object to customize the config. For a list of them refer to the [documentation](https://discord-voice.js.org/docs/main/master/typedef/VoiceManagerOptions).\n\n# Create an user\n\n```js\nclient.on(\"messageCreate\", (message) => {\n    const args = message.content.slice(settings.prefix.length).trim().split(/ +/g);\n    const command = args.shift().toLowerCase();\n\n    if (command === \"create-user\") {\n        client.voiceManager.createUser(message.author.id, message.guild.id, {\n            levelingData: {\n                xp: 0,\n                level: 0\n            }\n            // The user will have 0 xp and 0 level.\n        });\n    }\n});\n```\n\nThis allow's you create a user in the database if the user is not already present in the database. You can pass an options object to customize the user's data. For a list of them refer to the [documentation](https://discord-voice.js.org/docs/main/master/typedef/UserOptions).\n\n# Create a config\n\n```js\nclient.on(\"messageCreate\", (message) => {\n    const args = message.content.slice(settings.prefix.length).trim().split(/ +/g);\n    const command = args.shift().toLowerCase();\n\n    if (command === \"create-config\") {\n        client.voiceManager.createConfig(message.guild.id, {\n            trackBots: false, // If the user is a bot it will not be tracked.\n            trackAllChannels: true, // All of the channels in the guild will be tracked.\n            exemptChannels: () => false, // The user will not be tracked in these channels. (This is a function).\n            channelIds: [], // The channel ids to track. (If trackAllChannels is true, this is ignored)\n            exemptPermissions: [], // The user permissions to not track.\n            exemptMembers: () => false, // The user will not be tracked. (This is a function).\n            trackMute: true, // It will track users if they are muted aswell.\n            trackDeaf: true, // It will track users if they are deafen aswell.\n            minUserCountToParticipate: 0, // The min amount of users to be in a channel to be tracked.\n            maxUserCountToParticipate: 0, // The max amount of users to be in a channel to be tracked.\n            minXpToParticipate: 0, // The min amount of xp needed to be tracked.\n            minLevelToParticipate: 0, // The min level needed to be tracked.\n            maxXpToParticipate: 0, // The max amount of xp needed to be tracked.\n            maxLevelToParticipate: 0, // The max level needed to be tracked.\n            xpAmountToAdd: () => Math.floor(Math.random() * 10) + 1, // The amount of xp to add to the user (This is a function).\n            voiceTimeToAdd: () => 1000, // The amount of time in ms to add to the user (This is a function).\n            voiceTimeTrackingEnabled: true, // Whether the voiceTimeTracking module is enabled.\n            levelingTrackingEnabled: true // Whether the levelingTracking module is enabled.\n        });\n    }\n});\n```\n\nThis allow's you create a config in the database if the config is not already present in the database. You can pass an options object to customize the config's data. For a list of them refer to the [documentation](https://discord-voice.js.org/docs/main/master/typedef/ConfigOptions).\n\n# Remove an user\n\n```js\nclient.on(\"messageCreate\", (message) => {\n    const args = message.content.slice(settings.prefix.length).trim().split(/ +/g);\n    const command = args.shift().toLowerCase();\n\n    if (command === \"remove-user\") {\n        client.voiceManager.removeUser(message.author.id, message.guild.id); // Removes the user from the database and the cache.\n    }\n});\n```\n\n# Remove a config\n\n```js\nclient.on(\"messageCreate\", (message) => {\n    const args = message.content.slice(settings.prefix.length).trim().split(/ +/g);\n    const command = args.shift().toLowerCase();\n\n    if (command === \"remove-config\") {\n        client.voiceManager.removeConfig(message.guild.id); // Removes the config from the database and the cache.\n    }\n});\n```\n\n# Updating an user\n\n```js\nclient.on(\"messageCreate\", (message) => {\n    const args = message.content.slice(settings.prefix.length).trim().split(/ +/g);\n    const command = args.shift().toLowerCase();\n\n    if (command === \"edit-user\") {\n        client.voiceManager.updateUser(message.author.id, message.guild.id, {\n            newVoiceTime: {\n                channels: [],\n                total: 0\n            } // The new voice time user will have.\n        });\n    }\n});\n```\n\nThis allow's you edit a user's data. You need to pass an options object to edit the user's data. For a list of them refer to the [documentation](https://discord-voice.js.org/docs/main/master/typedef/UserEditOptions).\n\n# Updating a config\n\n```js\nclient.on(\"messageCreate\", (message) => {\n    const args = message.content.slice(settings.prefix.length).trim().split(/ +/g);\n    const command = args.shift().toLowerCase();\n\n    if (command === \"edit-config\") {\n        client.voiceManager.updateConfig(message.guild.id, {\n            newTrackBots: true // The module will now track bot user's voice time aswell.\n        });\n    }\n});\n```\n\nThis allow's you edit a config's data. You need to pass an options object to edit the config's data. For a list of them refer to the [documentation](https://discord-voice.js.org/docs/main/master/typedef/ConfigEditOptions).\n\n# Fetch users\n\n```js\n// A list of all the users\nconst allUsers = client.voiceManager.users; // [ {User}, {User} ]\n\n// A list of all the users on the server with ID \"1909282092\"\nconst onServer = client.voiceManager.users.filter((u) => u.guildId === \"1909282092\");\n\n// The user on the server with Id \"1909282092\" and the user Id \"1234567890\"\nconst user = client.voiceManager.users.filter((u) => u.guildId === \"1909282092\" && u.userId === \"1234567890\");\n```\n\n# Fetch configs\n\n```js\n// A list of all the configs\nconst allConfigs = client.voiceManager.configs; // [ {Config}, {Config} ]\n\n// The config of the guild with Id \"1909282092\"\nconst config = client.voiceManager.configs.filter((c) => c.guildId === \"1909282092\");\n```\n\n# Exempt Channels\n\n```js\nclient.voiceManager.updateConfig(message.guild.id, {\n    // The channel will not be tracked if it's name is \"private\"\n    exemptChannels: (channel) => channel.name === \"private\")\n});\n```\n\n‚ö†Ô∏è Note: If the function should be customizable\n\n```js\nconst channelName = \"private\";\nclient.voiceManager.updateConfig(message.guild.id, {\n    // The channel won't be tracked if it's name is equal to the value which is assigned to \"channelName\"\n    exemptChannels: new Function(\"channel\", `return channel.name === \\'${channelName}\\'`)\n});\n```\n\n# Exempt Members\n\n```js\nclient.voiceManager.updateConfig(message.guild.id, {\n    // Only members who have the \"Nitro Boost\" role are able to be tracked\n    exemptMembers: (member) => !member.roles.cache.some((r) => r.name === \"Nitro Boost\")\n});\n```\n\n‚ö†Ô∏è Note: If the function should be customizable\n\n```js\nconst roleName = \"Nitro Boost\";\nclient.voiceManager.updateConfig(message.guild.id, {\n    // Only members who have the the role which is assigned to \"roleName\" are able to be tracked\n    exemptMembers: new Function(\"member\", `return !member.roles.cache.some((r) => r.name === \\'${roleName}\\')`)\n});\n```\n\n# Voice Time To Add\n\n```js\nclient.voiceManager.updateConfig(message.guild.id, {\n    xpAmountToAdd: () => Math.floor(Math.random() * 10) + 1 // This will add a random amount between 1 and 10 of xp to the user.\n});\n```\n\n‚ö†Ô∏è Note: The returned value should be a number or the default value (`Math.floor(Math.random() * 10) + 1`) will be used.\n\n# Xp Amount To Add\n\n```js\nclient.voiceManager.updateConfig(message.guild.id, {\n    voiceTimeToAdd: () => 1000 // This will add 1000 ms of voice time everytime the user is checked.\n});\n```\n\n‚ö†Ô∏è Note: The returned value should be a number or the default value (`1000`) will be used.\n\n# Level Multiplier\n\n```js\nclient.voiceManager.updateConfig(message.guild.id, {\n    levelMultiplier: () => 0.1 // This will set the level multiplier to 0.1 (normally it's 0.1).\n});\n```\n\n‚ö†Ô∏è Note: The returned value should be a number or the default value (`0.1`) will be used.\n\n# Custom Database\n\nYou can use your custom database to save users and configs, instead of the json files (the \"database\" by default for `discord-voice`). For this, you will need to extend the `VoiceManager` class, and replace some methods with your custom ones. There are 8 methods you will need to replace:\n\n-   `getAllUsers`: this method returns an array of stored users.\n-   `getAllConfigs`: this method returns an array of stored configs.\n-   `saveUser`: this method stores a new user in the database.\n-   `saveConfig`: this method stores a new config in the database.\n-   `editUser`: this method edits a user already stored in the database.\n-   `editConfig`: this method edits a config already stored in the database.\n-   `deleteUser`: this method deletes a user from the database (permanently).\n-   `deleteConfig`: this method deletes a config from the database (permanently).\n\n**‚ö†Ô∏è All the methods should be asynchronous to return a promise!**\n\nHere is an example, using `quick.db`, a SQLite database. The comments in the code below are very important to understand how it works!\n\nOther examples:\n\n-   MongoDB\n    -   [Mongoose](https://github.com/Lebyy/discord-voice/blob/master/examples/custom-databases/mongoose.js)\n    -   [QuickMongo](https://github.com/Lebyy/discord-voice/blob/master/examples/custom-databases/quickmongo.js) ‚ö†Ô∏è Not recommended for high giveaway usage, use the `mongoose` example instead\n-   [Enmap](https://github.com/Lebyy/discord-voice/blob/master/examples/custom-databases/enmap.js)\n-   Replit Database ‚ö†Ô∏è Only usable if your bot is hosted on [Replit](https://replit.com/)\n    -   [Quick.Replit](https://github.com/Lebyy/discord-voice/blob/master/examples/custom-databases/quickreplit.js)\n\n```js\nconst { Client, Intents } = require(\"discord.js\"), // npm install discord.js\n    client = new Client({\n        intents: [Intents.FLAGS.GUILD_VOICE_STATES, Intents.FLAGS.GUILDS, Intents.FLAGS.GUILD_MESSAGES] // The GUILD_VOICE_STATES and GUILDS intents are required for discord-voice to function.\n    }),\n    settings = {\n        prefix: \"v!\",\n        token: \"Your Discord Bot Token\"\n    };\n\n// Load quick.db - it's an example of custom database, you can use MySQL, PostgreSQL, etc...\nconst db = require(\"quick.db\");\nif (!Array.isArray(db.get(\"users\"))) db.set(\"users\", []);\nif (!Array.isArray(db.get(\"configs\"))) db.set(\"configs\", []);\n\nconst { VoiceManager } = require(\"discord-voice\");\nconst VoiceManagerWithOwnDatabase = class extends VoiceManager {\n    // This function is called when the manager needs to get all users which are stored in the database.\n    async getAllUsers() {\n        // Get all users from the database\n        return db.get(\"users\");\n    }\n\n    // This function is called when the manager needs to get all configs which are stored in the database.\n    async getAllConfigs() {\n        // Get all configs from the database\n        return db.get(\"configs\");\n    }\n\n    // This function is called when a user needs to be saved in the database.\n    async saveUser(userId, guildId, userData) {\n        // Add the new user to the database\n        db.push(\"users\", userData);\n        // Don't forget to return something!\n        return true;\n    }\n\n    // This function is called when a user needs to be saved in the database.\n    async saveConfig(guildId, configData) {\n        // Add the new user to the database\n        db.push(\"configs\", configData);\n        // Don't forget to return something!\n        return true;\n    }\n\n    // This function is called when a user needs to be edited in the database.\n    async editUser(userId, guildId, userData) {\n        // Get all users from the database\n        const users = db.get(\"users\");\n        // Find the user to edit\n        const user = users.find((u) => u.guildId === guildId && u.userId === userId);\n        // Remove the unedited user from the array\n        const newUsersArray = users.filter((u) => u !== user);\n        // Push the edited user into the array\n        newUsersArray.push(userData);\n        // Save the updated array\n        db.set(\"users\", newUsersArray);\n        // Don't forget to return something!\n        return true;\n    }\n\n    // This function is called when a config needs to be edited in the database.\n    async editConfig(guildId, configData) {\n        // Get all configs from the database\n        const configs = db.get(\"configs\");\n        // Remove the unedited config from the array\n        const newConfigsArray = configs.filter((config) => config.guildId !== guildId);\n        // Push the edited config into the array\n        newConfigsArray.push(configData);\n        // Save the updated array\n        db.set(\"configs\", newConfigsArray);\n        // Don't forget to return something!\n        return true;\n    }\n\n    // This function is called when a user needs to be deleted from the database.\n    async deleteUser(userId, guildId) {\n        // Get all users from the database\n        const users = db.get(\"users\");\n        // Find the user to edit\n        const user = users.find((u) => u.guildId === guildId && u.userId === userId);\n        // Remove the user from the array\n        const newUsersArray = users.filter((u) => u !== user);\n        // Save the updated array\n        db.set(\"users\", newUsersArray);\n        // Don't forget to return something!\n        return true;\n    }\n\n    // This function is called when a config needs to be deleted from the database.\n    async deleteConfig(guildId) {\n        // Get all configs from the database\n        const configs = db.get(\"configs\");\n        // Remove the config from the array\n        const newConfigsArray = configs.filter((config) => config.guildId !== guildId);\n        // Save the updated array\n        db.set(\"configs\", newConfigsArray);\n        // Don't forget to return something!\n        return true;\n    }\n};\n\n// Create a new instance of your new class\nconst manager = new VoiceManagerWithOwnDatabase(client, {\n    checkMembersEvery: 5000,\n    default: {\n        trackBots: false,\n        trackAllChannels: true\n    }\n});\n// We now have a voiceManager property to access the manager everywhere!\nclient.voiceManager = manager;\n\nclient.on(\"ready\", () => {\n    console.log(\"I'm ready!\");\n});\n\nclient.login(settings.token);\n```\n\n# Shards Support\n\nTo make `discord-voice` work with shards, you will need to extend the `VoiceManager` class and update the `refreshStorage()` method. This method should call the `getAllUsers()` and `getAllConfigs()` method for every shard, so all `VoiceManager`'s synchronize their cache with the updated database.\n\n```js\nconst { Client, Intents } = require(\"discord.js\"), // npm install discord.js\n    client = new Client({\n        intents: [Intents.FLAGS.GUILD_VOICE_STATES, Intents.FLAGS.GUILDS, Intents.FLAGS.GUILD_MESSAGES] // The GUILD_VOICE_STATES and GUILDS intents are required for discord-voice to function.\n    }),\n    settings = {\n        prefix: \"v!\",\n        token: \"Your Discord Bot Token\"\n    };\n\n// Extends the VoiceManager class and update the refreshStorage method\nconst { VoiceManager } = require(\"discord-voice\");\nconst VoiceManagerWithShardSupport = class extends VoiceManager {\n    // The refreshStorage method is called when the database is updated on one of the shards\n    async refreshStorage() {\n        // This should make all shards refresh their cache with the updated database\n        return client.shard.broadcastEval(() => this.voiceManager.getAllUsers() && this.voiceManager.getAllConfigs());\n    }\n};\n\n// Create a new instance of your new class\nconst manager = new VoiceManagerWithShardSupport(client, {\n    userStorage: \"./users.json\",\n    configStorage: \"./configs.json\",\n    checkMembersEvery: 5000,\n    default: {\n        trackBots: false,\n        trackAllChannels: true\n    }\n});\n// We now have a voiceManager property to access the manager everywhere!\nclient.voiceManager = manager;\n\nclient.on(\"ready\", () => {\n    console.log(\"I'm ready!\");\n});\n\nclient.login(settings.token);\n```\n\n<div>Icons made by <a href=\"https://www.flaticon.com/authors/surang\" title=\"surang\">surang</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n","path":"docs/general/welcome.md"}}}},"classes":[{"name":"Config","description":"Represents a Config","construct":{"name":"Config","params":[{"name":"manager","description":"The Voice Manager","type":[[["VoiceManager"]]]},{"name":"options","description":"The config options","type":[[["ConfigData"]]]}]},"props":[{"name":"manager","description":"The Voice Manager","type":[[["VoiceManager"]]],"meta":{"line":22,"file":"Config.js","path":"src"}},{"name":"guildId","description":"The guild Id of the config","type":[[["Snowflake"]]],"meta":{"line":27,"file":"Config.js","path":"src"}},{"name":"options","description":"The config data","type":[[["ConfigOptions"]]],"meta":{"line":32,"file":"Config.js","path":"src"}},{"name":"trackBots","description":"Whether bots are able to be tracked.","type":[[["Boolean"]]],"meta":{"line":39,"file":"Config.js","path":"src"}},{"name":"trackMute","description":"Whether to track all of the guild's voice channels.","type":[[["Boolean"]]],"meta":{"line":47,"file":"Config.js","path":"src"}},{"name":"trackDeaf","description":"Whether members who are deafened should be tracked.","type":[[["Boolean"]]],"meta":{"line":55,"file":"Config.js","path":"src"}},{"name":"trackAllChannels","description":"Whether the bots are able to be tracked","type":[[["Boolean"]]],"meta":{"line":63,"file":"Config.js","path":"src"}},{"name":"minUserCountToParticipate","description":"The min amount of users to be in a channel to be tracked (0 is equal to no limit).","type":[[["Number"]]],"meta":{"line":71,"file":"Config.js","path":"src"}},{"name":"maxUserCountToParticipate","description":"The max amount of users to be in a channel to be tracked uptil (0 is equal to no limit).","type":[[["Number"]]],"meta":{"line":79,"file":"Config.js","path":"src"}},{"name":"minXpToParticipate","description":"The min amount of xp the user needs to have to be tracked (0 is equal to no limit).","type":[[["Number"]]],"meta":{"line":87,"file":"Config.js","path":"src"}},{"name":"minLevelToParticipate","description":"The min amount of level the user needs to have to be tracked (0 is equal to no limit).","type":[[["Number"]]],"meta":{"line":95,"file":"Config.js","path":"src"}},{"name":"maxXpToParticipate","description":"The max amount of xp the user can be tracked uptil (0 is equal to no limit).","type":[[["Number"]]],"meta":{"line":103,"file":"Config.js","path":"src"}},{"name":"maxLevelToParticipate","description":"The max amount of level the user can be tracked uptil (0 is equal to no limit).","type":[[["Number"]]],"meta":{"line":111,"file":"Config.js","path":"src"}},{"name":"voiceTimeTrackingEnabled","description":"Whether the voice time tracking module is enabled.","type":[[["Boolean"]]],"meta":{"line":119,"file":"Config.js","path":"src"}},{"name":"levelingTrackingEnabled","description":"Whether the leveling tracking module is enabled.","type":[[["Boolean"]]],"meta":{"line":127,"file":"Config.js","path":"src"}},{"name":"data","description":"The raw config object for this guild's config.","type":[[["ConfigData"]]],"meta":{"line":135,"file":"Config.js","path":"src"}},{"name":"exemptPermissions","description":"Members with any of these permissions won't be tracked.","type":[[["Array","<"],["PermissionResolvable",">"]]],"meta":{"line":168,"file":"Config.js","path":"src"}},{"name":"exemptMembersFunction","description":"The exemptMembers function","type":[[["function"]]],"meta":{"line":176,"file":"Config.js","path":"src"}},{"name":"exemptChannelsFunction","description":"The exemptChannels function","type":[[["function"]]],"meta":{"line":184,"file":"Config.js","path":"src"}},{"name":"xpAmountToAddFunction","description":"The xpAmountToAdd function","type":[[["function"]]],"meta":{"line":192,"file":"Config.js","path":"src"}},{"name":"voiceTimeToAddFunction","description":"The voiceTimeToAdd function","type":[[["function"]]],"meta":{"line":200,"file":"Config.js","path":"src"}},{"name":"levelMultiplierFunction","description":"The levelMultiplier function","type":[[["function"]]],"meta":{"line":208,"file":"Config.js","path":"src"}}],"methods":[{"name":"exemptMembers","description":"Function to filter members. If true is returned, the member won't be tracked.","async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":217,"file":"Config.js","path":"src"}},{"name":"exemptChannels","description":"Function to filter channels. If true is returned, the channel won't be tracked.","async":true,"returns":[[["Promise","<"],["number",">"]]],"meta":{"line":237,"file":"Config.js","path":"src"}},{"name":"xpAmountToAdd","description":"Function for xpAmountToAdd. If not provided, the default value is used (Math.floor(Math.random() * 10) + 1).","async":true,"returns":[[["Promise","<"],["number",">"]]],"meta":{"line":257,"file":"Config.js","path":"src"}},{"name":"voiceTimeToAdd","description":"Function for voiceTimeToAdd. If not provided, the default value is used (1000).","async":true,"returns":[[["Promise","<"],["number",">"]]],"meta":{"line":280,"file":"Config.js","path":"src"}},{"name":"levelMultiplier","description":"Function for levelMultiplier. If not provided, the default value is used (0.1).","async":true,"returns":[[["Promise","<"],["number",">"]]],"meta":{"line":303,"file":"Config.js","path":"src"}},{"name":"checkMember","params":[{"name":"member","description":"The member to check","type":[[["Member"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":326,"file":"Config.js","path":"src"}},{"name":"checkChannel","params":[{"name":"channel","description":"The channel to check","type":[[["VoiceChannel"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":345,"file":"Config.js","path":"src"}},{"name":"edit","description":"Edits the config","params":[{"name":"options","description":"The edit options","type":[[["ConfigEditOptions"]]]}],"returns":[[["Promise","<"],["Config",">"]]],"meta":{"line":359,"file":"Config.js","path":"src"}}],"meta":{"line":11,"file":"Config.js","path":"src"}},{"name":"VoiceManager","description":"Voice Manager","construct":{"name":"VoiceManager","params":[{"name":"client","description":"The Discord Client","type":[[["Client"]]]},{"name":"options","description":"The manager options","type":[[["VoiceManagerOptions"]]]}]},"props":[{"name":"client","description":"The Discord Client","type":[[["Client"]]],"meta":{"line":43,"file":"Manager.js","path":"src"}},{"name":"ready","description":"Whether the manager is ready","type":[[["Boolean"]]],"meta":{"line":48,"file":"Manager.js","path":"src"}},{"name":"users","description":"The user's managed by this manager","type":[[["Array","<"],["User",">"]]],"meta":{"line":53,"file":"Manager.js","path":"src"}},{"name":"configs","description":"The config's managed by this manager","type":[[["Array","<"],["Config",">"]]],"meta":{"line":58,"file":"Manager.js","path":"src"}},{"name":"options","description":"The manager options","type":[[["VoiceManagerOptions"]]],"meta":{"line":63,"file":"Manager.js","path":"src"}}],"methods":[{"name":"createUser","description":"Creates a new user in the database","examples":["manager.createUser(message.author.id, message.guild.id, {\n     levelingData: {\n     xp: 0,\n     level: 0,\n     },\n     // The user will have 0 xp and 0 level.\n});"],"params":[{"name":"userId","description":"The id of the user","type":[[["Snowflake"]]]},{"name":"guildId","description":"The id of the user's guild","type":[[["Snowflake"]]]},{"name":"options","description":"The options for the user","type":[[["UserOptions"]]]}],"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":84,"file":"Manager.js","path":"src"}},{"name":"createConfig","description":"Creates a new config in the database","examples":["manager.createConfig(message.guild.id, {\n     trackBots: false, // If the user is a bot it will not be tracked.\n     trackAllChannels: true, // All of the channels in the guild will be tracked.\n     exemptChannels: () => false, // The user will not be tracked in these channels. (This is a function).\n     channelIds: [], // The channel ids to track. (If trackAllChannels is true, this is ignored)\n     exemptPermissions: [], // The user permissions to not track.\n     exemptMembers: () => false, // The user will not be tracked. (This is a function).\n     trackMute: true, // It will track users if they are muted aswell.\n     trackDeaf: true, // It will track users if they are deafen aswell.\n     minUserCountToParticipate: 0, // The min amount of users to be in a channel to be tracked.\n     maxUserCountToParticipate: 0, // The max amount of users to be in a channel to be tracked.\n     minXpToParticipate: 0, // The min amount of xp needed to be tracked.\n     minLevelToParticipate: 0, // The min level needed to be tracked.\n     maxXpToParticipate: 0, // The max amount of xp needed to be tracked.\n     maxLevelToParticipate: 0, // The max level needed to be tracked.\n     xpAmountToAdd: () => Math.floor(Math.random() * 10) + 1, // The amount of xp to add to the user (This is a function).\n     voiceTimeToAdd: () => 1000, // The amount of time in ms to add to the user (This is a function).\n     voiceTimeTrackingEnabled: true, // Whether the voiceTimeTracking module is enabled.\n     levelingTrackingEnabled: true, // Whether the levelingTracking module is enabled.\n     levelMultiplier: () => 0.1, // This will set level multiplier to 0.1 (This is a function).\n});"],"params":[{"name":"guildId","description":"The id of the config's guild","type":[[["Snowflake"]]]},{"name":"options","description":"The options for config","type":[[["ConfigOptions"]]]}],"returns":[[["Promise","<"],["Config",">"]]],"meta":{"line":137,"file":"Manager.js","path":"src"}},{"name":"removeUser","description":"Remove's the user from the database","examples":["manager.removeUser(message.author.id, message.guild.id);"],"params":[{"name":"userId","description":"The id of the user","type":[[["Snowflake"]]]},{"name":"guildId","description":"The id of the user's guild","type":[[["Snowflake"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":166,"file":"Manager.js","path":"src"}},{"name":"removeConfig","description":"Remove's the config from the database","examples":["manager.removeConfig(message.guild.id);"],"params":[{"name":"guildId","description":"The id of the config's guild","type":[[["Snowflake"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":195,"file":"Manager.js","path":"src"}},{"name":"updateUser","description":"Edits a user. The modifications will be applicated when the user will be updated.","examples":["manager.updateUser('122925169588043776','815261972450115585', {\n     newVoiceTime: {\n     channels: [],\n     total: 0,\n     }, // The new voice time user will have.\n});"],"params":[{"name":"userId","description":"The id of the user","type":[[["Snowflake"]]]},{"name":"guildId","description":"The id of the user's guild","type":[[["Snowflake"]]]},{"name":"options","description":"The edit options","type":[[["UserEditOptions"]]]}],"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":221,"file":"Manager.js","path":"src"}},{"name":"updateConfig","description":"Edits a config.","examples":["manager.updateConfig('815261972450115585', {\n     newTrackBots: true, // The module will now track bot user's voice time aswell.\n});"],"params":[{"name":"guildId","description":"The id of the user's guild","type":[[["Snowflake"]]]},{"name":"options","description":"The edit options","type":[[["ConfigEditOptions"]]]}],"returns":[[["Promise","<"],["Config",">"]]],"meta":{"line":241,"file":"Manager.js","path":"src"}},{"name":"deleteUser","description":"Delete a user from the database","params":[{"name":"userId","description":"The id of the user","type":[[["Snowflake"]]]},{"name":"guildId","description":"The id of the user's guild","type":[[["Snowflake"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":257,"file":"Manager.js","path":"src"}},{"name":"deleteConfig","description":"Delete a config from the database","params":[{"name":"guildId","description":"The id of the config's guild","type":[[["Snowflake"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":268,"file":"Manager.js","path":"src"}},{"name":"refreshUserStorage","description":"Refresh the user cache to support shards.","async":true,"meta":{"line":277,"file":"Manager.js","path":"src"}},{"name":"refreshConfigStorage","description":"Refresh the config cache to support shards.","async":true,"meta":{"line":284,"file":"Manager.js","path":"src"}},{"name":"editUser","description":"Edit the user in the database","params":[{"name":"userId","description":"The id of the user","type":[[["Snowflake"]]]},{"name":"guildId","description":"The id of the user's guild","type":[[["Snowflake"]]]},{"name":"userData","description":"The user data to save","type":[[["UserData"]]]}],"async":true,"meta":{"line":294,"file":"Manager.js","path":"src"}},{"name":"editConfig","description":"Edit the config in the database","params":[{"name":"guildId","description":"The id of the config's guild","type":[[["Snowflake"]]]},{"name":"ConfigData","description":"The config data to save","type":[[["ConfigData"]]]}],"async":true,"meta":{"line":305,"file":"Manager.js","path":"src"}},{"name":"saveUser","description":"Save the user in the database","params":[{"name":"userId","description":"The id of the user","type":[[["Snowflake"]]]},{"name":"guildId","description":"The id of the user's guild","type":[[["Snowflake"]]]},{"name":"userData","description":"The user data to save","type":[[["UserData"]]]}],"async":true,"meta":{"line":317,"file":"Manager.js","path":"src"}},{"name":"saveConfig","description":"Save the config in the database","params":[{"name":"guildId","description":"The id of the config's guild","type":[[["Snowflake"]]]},{"name":"configData","description":"The config data to save","type":[[["ConfigData"]]]}],"async":true,"meta":{"line":328,"file":"Manager.js","path":"src"}},{"name":"getAllUsers","description":"Gets the user's from the storage file, or create it","async":true,"returns":[[["Promise","<"],["Array","<"],["UserData",">>"]]],"meta":{"line":338,"file":"Manager.js","path":"src"}},{"name":"getAllConfigs","description":"Gets the config's from the storage file, or create it","async":true,"returns":[[["Promise","<"],["Array","<"],["ConfigData",">>"]]],"meta":{"line":367,"file":"Manager.js","path":"src"}},{"name":"_checkUsers","description":"Checks each user and update it if needed","access":"private","meta":{"line":396,"file":"Manager.js","path":"src"}},{"name":"_checkUser","description":"Checks the provided user","access":"private","async":true,"meta":{"line":467,"file":"Manager.js","path":"src"}},{"name":"_handleVoiceStateUpdate","description":"Saves the new user to the storage file","access":"private","async":true,"meta":{"line":480,"file":"Manager.js","path":"src"}},{"name":"_init","description":"Inits the manager","access":"private","async":true,"meta":{"line":497,"file":"Manager.js","path":"src"}}],"events":[{"name":"userVoiceTimeAdd","description":"Emitted when voice time is added to the user.","params":[{"name":"oldUser","description":"The user before the update","type":[[["User"]]]},{"name":"newUser","description":"The user after the update","type":[[["User"]]]}],"meta":{"line":426,"file":"Manager.js","path":"src"}},{"name":"userXpAdd","description":"Emitted when xp is added to the user.","params":[{"name":"oldUser","description":"The user before the update","type":[[["User"]]]},{"name":"newUser","description":"The user after the update","type":[[["User"]]]}],"meta":{"line":438,"file":"Manager.js","path":"src"}},{"name":"userLevelUp","description":"Emitted when the user levels up.","params":[{"name":"oldUser","description":"The user before the update","type":[[["User"]]]},{"name":"newUser","description":"The user after the update","type":[[["User"]]]}],"meta":{"line":447,"file":"Manager.js","path":"src"}}],"meta":{"line":31,"file":"Manager.js","path":"src"}},{"name":"User","description":"Represents a User","construct":{"name":"User","params":[{"name":"manager","description":"The Voice Manager","type":[[["VoiceManager"]]]},{"name":"options","description":"The user options","type":[[["UserData"]]]}]},"props":[{"name":"manager","description":"The Voice Manager","type":[[["VoiceManager"]]],"meta":{"line":22,"file":"User.js","path":"src"}},{"name":"client","description":"The Discord Client","type":[[["Client"]]],"meta":{"line":27,"file":"User.js","path":"src"}},{"name":"userId","description":"The id of the user","type":[[["Snowflake"]]],"meta":{"line":32,"file":"User.js","path":"src"}},{"name":"guildId","description":"The guild id of the user","type":[[["Snowflake"]]],"meta":{"line":37,"file":"User.js","path":"src"}},{"name":"voiceTime","description":"The user voice time options","type":[[["UserVoiceTimeOptions"]]],"meta":{"line":42,"file":"User.js","path":"src"}},{"name":"levelingData","description":"The user leveling options","type":[[["UserLevelingOptions"]]],"meta":{"line":47,"file":"User.js","path":"src"}},{"name":"options","description":"The user options","type":[[["UserOptions"]]],"meta":{"line":52,"file":"User.js","path":"src"}},{"name":"guild","description":"The guild of the user","readonly":true,"type":[[["Guild"]]],"meta":{"line":60,"file":"User.js","path":"src"}},{"name":"user","description":"The user","readonly":true,"type":[[["DiscordUser"]]],"meta":{"line":69,"file":"User.js","path":"src"}},{"name":"channelAndMember","description":"Returns the user's voice channel and the member itself and creates a new user if a member is present in the voice channel and dosen't exist in the databse","readonly":true,"type":[[["channelAndMemberOptions"]]],"meta":{"line":78,"file":"User.js","path":"src"}},{"name":"channel","description":"The user's voice channel if present","readonly":true,"type":[[["VoiceChannel"]]],"meta":{"line":99,"file":"User.js","path":"src"}},{"name":"member","description":"The guild member data of the user","readonly":true,"type":[[["Member"]]],"meta":{"line":110,"file":"User.js","path":"src"}},{"name":"data","description":"The raw user data object for this user","readonly":true,"type":[[["UserData"]]],"meta":{"line":121,"file":"User.js","path":"src"}}],"methods":[{"name":"edit","description":"Edits the user","params":[{"name":"options","description":"The edit options","type":[[["UserEditOptions"]]]}],"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":138,"file":"User.js","path":"src"}}],"meta":{"line":11,"file":"User.js","path":"src"}}],"interfaces":[],"typedefs":[{"name":"VoiceManagerOptions","description":"The voice manager options","type":[[["object"]]],"props":[{"name":"userStorage","description":"The storage path for the user's data.","optional":true,"default":"\"./users.json\"","type":[[["string"]]]},{"name":"configStorage","description":"The storage path for the config's data.","optional":true,"default":"\"./configs.json\"","type":[[["string"]]]},{"name":"checkMembersEvery","description":"The user data update interval (in ms).","optional":true,"default":5000,"type":[[["number"]]]},{"name":"default","description":"The default config options.","optional":true,"type":[[["ConfigOptions"]]]},{"name":"default.trackBots","description":"Whether bots are able to be tracked.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"default.trackAllChannels","description":"Whether to track all of the guild's voice channels.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"default.exemptChannels","description":"Function to filter channels. If true is returned, the channel won't be tracked.","optional":true,"type":[[["function"]]]},{"name":"default.channelIds","description":"The channels to track (if trackAllChannels is true this will be ignored).","optional":true,"default":"[]","type":[[["Array","<"],["Snowflake",">"]]]},{"name":"default.exemptPermissions","description":"Members with any of these permissions won't be tracked.","optional":true,"default":"[]","type":[[["Array","<"],["PermissionResolvable",">"]]]},{"name":"default.exemptMembers","description":"Function to filter members. If true is returned, the member won't be tracked.","optional":true,"type":[[["function"]]]},{"name":"default.trackMute","description":"Whether members who are muted should be tracked.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"default.trackDeaf","description":"Whether members who are deafened should be tracked.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"default.minUserCountToParticipate","description":"The min amount of users to be in a channel to be tracked (0 is equal to no limit).","optional":true,"default":"\"0\"","type":[[["number"]]]},{"name":"default.maxUserCountToParticipate","description":"The max amount of users to be in a channel to be tracked uptil (0 is equal to no limit).","optional":true,"default":"\"0\"","type":[[["number"]]]},{"name":"default.minXpToParticipate","description":"The min amount of xp the user needs to have to be tracked (0 is equal to no limit).","optional":true,"default":"\"0\"","type":[[["number"]]]},{"name":"default.minLevelToParticipate","description":"The min amount of level the user needs to have to be tracked (0 is equal to no limit).","optional":true,"default":"\"0\"","type":[[["number"]]]},{"name":"default.maxXpToParticipate","description":"The max amount of xp the user can be tracked uptil (0 is equal to no limit).","optional":true,"default":"\"0\"","type":[[["number"]]]},{"name":"default.maxLevelToParticipate","description":"The max amount of level the user can be tracked uptil (0 is equal to no limit).","optional":true,"default":"\"0\"","type":[[["number"]]]},{"name":"default.xpAmountToAdd","description":"Function for xpAmountToAdd. If not provided, the default value is used (Math.floor(Math.random() * 10) + 1).","optional":true,"type":[[["function"]]]},{"name":"default.voiceTimeToAdd","description":"Function for voiceTimeToAdd. If not provided, the default value is used (1000).","optional":true,"type":[[["function"]]]},{"name":"defaul.voiceTimeTrackingEnabled","description":"Whether to enable the voice time tracking module.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"default.levelingTrackingEnabled","description":"Whether to enable the leveling tracking module.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"default.levelMultiplier","description":"Function for levelMultiplier. If not provided, the default value is used (0.1).","optional":true,"type":[[["function"]]]}],"meta":{"line":2,"file":"Constants.js","path":"src"}},{"name":"ConfigOptions","description":"The config options","type":[[["object"]]],"props":[{"name":"trackBots","description":"Whether bots are able to be tracked.","optional":true,"default":false,"type":[[["Boolean"]]]},{"name":"trackAllChannels","description":"Whether to track all of the guild's voice channels.","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"exemptChannels","description":"Function to filter channels. If true is returned, the channel won't be tracked.","optional":true,"type":[[["function"]]]},{"name":"channelIds","description":"The channels to track (if trackAllChannels is true this will be ignored).","optional":true,"default":"[]","type":[[["Array","<"],["Snowflake",">"]]]},{"name":"exemptPermissions","description":"Members with any of these permissions won't be tracked.","optional":true,"default":"[]","type":[[["Array","<"],["PermissionResolvable",">"]]]},{"name":"exemptMembers","description":"Function to filter members. If true is returned, the member won't be tracked.","optional":true,"type":[[["function"]]]},{"name":"trackMute","description":"Whether members who are muted should be tracked.","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"trackDeaf","description":"Whether members who are deafened should be tracked.","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"minUserCountToParticipate","description":"The min amount of users to be in a channel to be tracked (0 is equal to no limit).","optional":true,"default":"\"0\"","type":[[["number"]]]},{"name":"maxUserCountToParticipate","description":"The max amount of users to be in a channel to be tracked uptil (0 is equal to no limit).","optional":true,"default":"\"0\"","type":[[["number"]]]},{"name":"minXpToParticipate","description":"The min amount of xp the user needs to have to be tracked (0 is equal to no limit).","optional":true,"default":"\"0\"","type":[[["number"]]]},{"name":"minLevelToParticipate","description":"The min amount of level the user needs to have to be tracked (0 is equal to no limit).","optional":true,"default":"\"0\"","type":[[["number"]]]},{"name":"maxXpToParticipate","description":"The max amount of xp the user can be tracked uptil (0 is equal to no limit).","optional":true,"default":"\"0\"","type":[[["number"]]]},{"name":"maxLevelToParticipate","description":"The max amount of level the user can be tracked uptil (0 is equal to no limit).","optional":true,"default":"\"0\"","type":[[["number"]]]},{"name":"xpAmountToAdd","description":"Function for xpAmountToAdd. If not provided, the default value is used (Math.floor(Math.random() * 10) + 1).","optional":true,"type":[[["function"]]]},{"name":"voiceTimeToAdd","description":"Function for voiceTimeToAdd. If not provided, the default value is used (1000).","optional":true,"type":[[["function"]]]},{"name":"voiceTimeTrackingEnabled","description":"Whether to enable the voice time tracking module.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"levelingTrackingEnabled","description":"Whether to enable the leveling tracking module.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"levelMultiplier","description":"Function for levelMultiplier. If not provided, the default value is used (0.1).","optional":true,"type":[[["function"]]]}],"meta":{"line":63,"file":"Constants.js","path":"src"}},{"name":"ConfigData","description":"Raw config object (used to store config's in the database).","type":[[["object"]]],"props":[{"name":"guildId","description":"The ID of the guild.","type":[[["Snowflake"]]]},{"name":"trackBots","description":"Whether bots are able to be tracked.","type":[[["Boolean"]]]},{"name":"trackAllChannels","description":"Whether to track all of the guild's voice channels.","type":[[["Boolean"]]]},{"name":"exemptChannels","description":"Function to filter channels. If true is returned, the channel won't be tracked.","type":[[["function"]]]},{"name":"channelIds","description":"The channels to track (if trackAllChannels is true this will be ignored).","type":[[["Array","<"],["Snowflake",">"]]]},{"name":"exemptPermissions","description":"Members with any of these permissions won't be tracked.","type":[[["Array","<"],["PermissionResolvable",">"]]]},{"name":"exemptMembers","description":"Function to filter members. If true is returned, the member won't be tracked.","type":[[["function"]]]},{"name":"trackMute","description":"Whether members who are muted should be tracked.","type":[[["Boolean"]]]},{"name":"trackDeaf","description":"Whether members who are deafened should be tracked.","type":[[["Boolean"]]]},{"name":"minUserCountToParticipate","description":"The min amount of users to be in a channel to be tracked (0 is equal to no limit).","type":[[["number"]]]},{"name":"maxUserCountToParticipate","description":"The max amount of users to be in a channel to be tracked uptil (0 is equal to no limit).","type":[[["number"]]]},{"name":"minXpToParticipate","description":"The min amount of xp the user needs to have to be tracked (0 is equal to no limit).","type":[[["number"]]]},{"name":"minLevelToParticipate","description":"The min amount of level the user needs to have to be tracked (0 is equal to no limit).","type":[[["number"]]]},{"name":"maxXpToParticipate","description":"The max amount of xp the user can be tracked uptil (0 is equal to no limit).","type":[[["number"]]]},{"name":"maxLevelToParticipate","description":"The max amount of level the user can be tracked uptil (0 is equal to no limit).","type":[[["number"]]]},{"name":"xpAmountToAdd","description":"Function for xpAmountToAdd. If not provided, the default value is used (Math.floor(Math.random() * 10) + 1).","type":[[["function"]]]},{"name":"voiceTimeToAdd","description":"Function for voiceTimeToAdd. If not provided, the default value is used (1000).","type":[[["function"]]]},{"name":"voiceTimeTrackingEnabled","description":"Whether to enable the voice time tracking module.","type":[[["boolean"]]]},{"name":"levelingTrackingEnabled","description":"Whether to enable the leveling tracking module.","type":[[["boolean"]]]},{"name":"levelMultiplier","description":"Function for levelMultiplier. If not provided, the default value is used (0.1).","type":[[["function"]]]}],"meta":{"line":115,"file":"Constants.js","path":"src"}},{"name":"ConfigEditOptions","description":"The config edit method options","type":[[["object"]]],"props":[{"name":"newTrackBots","description":"Whether bots are able to be tracked.","optional":true,"default":false,"type":[[["Boolean"]]]},{"name":"newTrackAllChannels","description":"Whether to track all of the guild's voice channels.","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"newExemptChannels","description":"Function to filter channels. If true is returned, the channel won't be tracked.","optional":true,"type":[[["function"]]]},{"name":"newChannelIDs","description":"The channels to track (if trackAllChannels is true this will be ignored).","optional":true,"default":"[]","type":[[["Array","<"],["Snowflake",">"]]]},{"name":"newExemptPermissions","description":"Members with any of these permissions won't be tracked.","optional":true,"default":"[]","type":[[["Array","<"],["PermissionResolvable",">"]]]},{"name":"newExemptMembers","description":"Function to filter members. If true is returned, the member won't be tracked.","optional":true,"type":[[["function"]]]},{"name":"newTrackMute","description":"Whether members who are muted should be tracked.","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"newTrackDeaf","description":"Whether members who are deafened should be tracked.","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"newMinUserCountToParticipate","description":"The min amount of users to be in a channel to be tracked (0 is equal to no limit).","optional":true,"default":"\"0\"","type":[[["number"]]]},{"name":"newMaxUserCountToParticipate","description":"The max amount of users to be in a channel to be tracked uptil (0 is equal to no limit).","optional":true,"default":"\"0\"","type":[[["number"]]]},{"name":"newMinXpToParticipate","description":"The min amount of xp the user needs to have to be tracked (0 is equal to no limit).","optional":true,"default":"\"0\"","type":[[["number"]]]},{"name":"newMinLevelToParticipate","description":"The min amount of level the user needs to have to be tracked (0 is equal to no limit).","optional":true,"default":"\"0\"","type":[[["number"]]]},{"name":"newMaxXpToParticipate","description":"The max amount of xp the user can be tracked uptil (0 is equal to no limit).","optional":true,"default":"\"0\"","type":[[["number"]]]},{"name":"newMaxLevelToParticipate","description":"The max amount of level the user can be tracked uptil (0 is equal to no limit).","optional":true,"default":"\"0\"","type":[[["number"]]]},{"name":"newXpAmountToAdd","description":"Function for xpAmountToAdd. If not provided, the default value is used (Math.floor(Math.random() * 10) + 1).","optional":true,"type":[[["function"]]]},{"name":"newVoiceTimeToAdd","description":"Function for voiceTimeToAdd. If not provided, the default value is used (1000).","optional":true,"type":[[["function"]]]},{"name":"newVoiceTimeTrackingEnabled","description":"Whether to enable the voice time tracking module.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"newLevelingTrackingEnabled","description":"Whether to enable the leveling tracking module.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"newLevelMultiplier","description":"Function for levelMultiplier. If not provided, the default value is used (0.1).","optional":true,"type":[[["function"]]]}],"meta":{"line":142,"file":"Constants.js","path":"src"}},{"name":"UserOptions","description":"The user options","type":[[["object"]]],"props":[{"name":"voiceTime","description":"The voice time data of the user.","type":[[["UserVoiceTimeOptions"]]]},{"name":"voiceTime.channels","description":"The user's voice time in the channels.","type":[[["UserVoiceTimeChannelsOptions"]]]},{"name":"voiceTime.total","description":"The user's total voice time.","type":[[["Number"]]]},{"name":"levelingData","description":"The leveling data of the user.","type":[[["UserLevelingOptions"]]]},{"name":"levelingData.xp","description":"The user's xp.","type":[[["Number"]]]},{"name":"levelingData.level","description":"The user's level.","type":[[["Number"]]]}],"meta":{"line":167,"file":"Constants.js","path":"src"}},{"name":"UserVoiceTimeOptions","description":"The user voice time options","type":[[["object"]]],"props":[{"name":"channels","description":"The user's voice time in the channels.","type":[[["UserVoiceTimeChannelsOptions"]]]},{"name":"total","description":"The user's total voice time.","type":[[["Number"]]]}],"meta":{"line":180,"file":"Constants.js","path":"src"}},{"name":"UserLevelingOptions","description":"The user voice time options","type":[[["object"]]],"props":[{"name":"xp","description":"The user's xp.","type":[[["Number"]]]},{"name":"level","description":"The user's level.","type":[[["Number"]]]}],"meta":{"line":189,"file":"Constants.js","path":"src"}},{"name":"UserVoiceTimeChannelsOptions","description":"The user voice time options","type":[[["object"]]],"props":[{"name":"channelId","description":"The id of the channel.","type":[[["Snowflake"]]]},{"name":"voiceTime","description":"The user's voice time in the channel.","type":[[["Number"]]]}],"meta":{"line":198,"file":"Constants.js","path":"src"}},{"name":"UserData","description":"Raw user object (used to store user's in the database).","type":[[["object"]]],"props":[{"name":"userId","description":"The ID of the user.","type":[[["Snowflake"]]]},{"name":"guildId","description":"The ID of the guild.","type":[[["Snowflake"]]]},{"name":"voiceTime","description":"The voice time data of the user.","type":[[["UserVoiceTimeOptions"]]]},{"name":"voiceTime.channels","description":"The user's voice time in the channels.","type":[[["UserVoiceTimeChannelsOptions"]]]},{"name":"voiceTime.total","description":"The user's total voice time.","type":[[["Number"]]]},{"name":"levelingData","description":"The leveling data of the user.","type":[[["UserLevelingOptions"]]]},{"name":"levelingData.xp","description":"The user's xp.","type":[[["Number"]]]},{"name":"levelingData.level","description":"The user's level.","type":[[["Number"]]]}],"meta":{"line":222,"file":"Constants.js","path":"src"}},{"name":"UserEditOptions","description":"The user edit method options","type":[[["object"]]],"props":[{"name":"newVoiceTime","description":"The new voice time options","optional":true,"type":[[["UserVoiceTimeOptions"]]]},{"name":"newLevelingData","description":"The new leveling options","optional":true,"type":[[["UserLevelingOptions"]]]}],"meta":{"line":237,"file":"Constants.js","path":"src"}},{"name":"channelAndMemberOptions","description":"The channelAndMember getter returned options","type":[[["object"]]],"props":[{"name":"channel","description":"The user voice channel if present","type":[[["VoiceChannel"]]]},{"name":"member","description":"The guild member data of the user if present","type":[[["Member"]]]}],"meta":{"line":246,"file":"Constants.js","path":"src"}}],"externals":[]}